rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Allow authenticated users to read/write their own user document
    match /users/{userId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null; // Allow any authenticated user to create their own user document
    }

    // Allow authenticated users to read/write their own transactions
    // Transactions are nested under a specific user's document
    match /users/{userId}/transactions/{transactionId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Allow authenticated users to read/write their own budgets
    // Budgets are nested under a specific user's document
    match /users/{userId}/budgets/{budgetId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Allow authenticated users to read/write their own achievements
    // Achievements are nested under a specific user's document
    match /users/{userId}/achievements/{achievementId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Optional: If you have any public collections that don't require authentication or specific user ownership,
    // you'd add rules here. For example, if categories are global:
    // match /categories/{categoryId} {
    //   allow read: true; // Anyone can read global categories
    //   allow write: if false; // Only admins should write, or from server-side
    // }
  }
}
